# -*- coding: utf-8 -*-
"""Universities_Emission_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t4flfwXh2BtO3Jv3Si1cGxlsoQsTPyZV

# Scraping the data
"""

pip install requests beautifulsoup4

import requests
from bs4 import BeautifulSoup
import pandas as pd
import ipywidgets as widgets

urls = {"gwu": "https://unhsimap.org/public/institution/312",
        "au": "https://unhsimap.org/public/institution/157",
        "gallaudet": "https://unhsimap.org/public/institution/1105"}
table_names = ["totals", "scopes", "categories", "mitigation_data"]
all_tables = {}

# Iterate over each institution
for institution, url in urls.items():
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    tables = soup.find_all('table')

    # Iterate through each table and assign dynamically
    for i, table in enumerate(tables):
        headers = [header.text.strip() for header in table.find_all('th')]
        rows = [[cell.text.strip() for cell in row.find_all('td')] for row in table.find_all('tr')[1:]]

        df = pd.DataFrame(rows, columns=headers)

        table_key = f"{table_names[i]}_{institution}" if i < len(table_names) else f"table_{i+1}_{institution}"
        all_tables[table_key] = df

# Assign each table to a variable dynamically
for table_name, df in all_tables.items():
    globals()[table_name] = df

"""# Datasets"""

# Scraped and assigned tables we have
all_tables.keys()

"""## GW"""

gw_tab = widgets.Tab()

tables = [totals_gwu, scopes_gwu, categories_gwu, mitigation_data_gwu]
titles = ["Totals", "Scopes", "Categories", "Mitigation Data"]

# Assign titles and content
gw_tab.children = [widgets.Output() for _ in tables]
for i, table in enumerate(tables):
    with gw_tab.children[i]:
        print(f"GWU - {titles[i]} Table")
        display(table)

# Set tab titles
for i, title in enumerate(titles):
    gw_tab.set_title(i, title)
display(gw_tab)

"""## American University"""

au_tab = widgets.Tab()

tables = [totals_au, scopes_au, categories_au, mitigation_data_au]
titles = ["Totals", "Scopes", "Categories", "Mitigation Data"]

# Assign titles and content
au_tab.children = [widgets.Output() for _ in tables]
for i, table in enumerate(tables):
    with au_tab.children[i]:
        print(f"AU - {titles[i]} Table")
        display(table)

# Set tab titles
for i, title in enumerate(titles):
    au_tab.set_title(i, title)
display(au_tab)

"""## Gallaudet University"""

gallaudet_tab = widgets.Tab()

tables = [totals_gallaudet, scopes_gallaudet, categories_gallaudet, mitigation_data_gallaudet]
titles = ["Totals", "Scopes", "Categories", "Mitigation Data"]

# Assign titles and content
gallaudet_tab.children = [widgets.Output() for _ in tables]
for i, table in enumerate(tables):
    with gallaudet_tab.children[i]:
        print(f"Gallaudet University - {titles[i]} Table")
        display(table)

# Set tab titles
for i, title in enumerate(titles):
    gallaudet_tab.set_title(i, title)
display(gallaudet_tab)

"""# Visualization/Analysis

## Gross Emission
"""

gwu_data = totals_gwu[['Fiscal Year', 'Gross MTCDE']].rename(columns={'Gross MTCDE': 'GWU'})
au_data = totals_au[['Fiscal Year', 'Gross MTCDE']].rename(columns={'Gross MTCDE': 'AU'})
gallaudet_data = totals_gallaudet[['Fiscal Year', 'Gross MTCDE']].rename(columns={'Gross MTCDE': 'Gallaudet'})

# Merge on 'Fiscal Year'
merged_data = gwu_data.merge(au_data, on='Fiscal Year', how='outer') \
                      .merge(gallaudet_data, on='Fiscal Year', how='outer')

merged_data['Fiscal Year'] = merged_data['Fiscal Year'].astype(str)
merged_data.fillna(0, inplace=True)

# merged_data.head()

merged_data['GWU'] = merged_data['GWU'].astype(str).str.replace(',', '').astype(float)
merged_data['AU'] = merged_data['AU'].astype(str).str.replace(',', '').astype(float)
merged_data['Gallaudet'] = merged_data['Gallaudet'].astype(str).str.replace(',', '').astype(float)

# Convert 'Fiscal Year' to string for categorical plotting
merged_data['Fiscal Year'] = merged_data['Fiscal Year'].astype(str)
df_long = merged_data.melt(id_vars=['Fiscal Year'], var_name='University', value_name='Net MTCDE')
# df_long.head()

fig = px.bar(df_long,
             x='Fiscal Year',
             y='Net MTCDE',
             color='University',
             barmode='group',
             labels={'Net MTCDE': 'MT eCO2'},
             title="Gross Footprint Comparison (GWU, AU, Gallaudet)",
             color_discrete_sequence=px.colors.qualitative.Dark24)
fig.update_layout(xaxis_title="Fiscal Year",
                  yaxis_title="MT eCO2",
                  legend_title="University",
                  width=1100,
                  height=600)
fig.show()

fig = px.line(df_long,
              x='Fiscal Year',
              y='Net MTCDE',
              color='University',
              markers=True,  # Add markers for visibility
              labels={'Net MTCDE': 'MT eCO2'},
              title="Gross Footprint Trend (GWU, AU, Gallaudet)",
              color_discrete_sequence=px.colors.qualitative.Dark24)
fig.update_layout(xaxis_title="Fiscal Year",
                  yaxis_title="MT eCO2",
                  legend_title="University",
                  width=1100,
                  height=600)
fig.show()

"""## Emission by Scope"""

def plot_scopes(data, university_name):
    """
    Creates a stacked bar chart for Scope 1, Scope 2, and Scope 3 emissions for a given university.

    Parameters:
        data: The scopes dataset (scopes_gwu, scopes_au, scopes_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()
    data1['GHG MTCDE'] = data1['GHG MTCDE'].astype(str).str.replace(',', '').astype(float)
    scope_mapping = {'1': "Scope 1", '2': "Scope 2", '3': "Scope 3"}
    data1['Scope'] = data1['Scope'].map(scope_mapping)

    fig = px.bar(data1,
                 x='Fiscal Year',
                 y='GHG MTCDE',
                 color='Scope',
                 title=f"Scopes - {university_name}",
                 labels={'GHG MTCDE': 'MT eCO2'},
                 barmode='stack',
                 color_discrete_sequence=px.colors.qualitative.D3)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Scope",
                      width=900,
                      height=600)
    fig.show()

scopes_datasets = {
    "George Washington University": scopes_gwu,
    "American University": scopes_au,
    "Gallaudet University": scopes_gallaudet
    }

for university, dataset in scopes_datasets.items():
    plot_scopes(dataset, university)

def plot_scopes_line(data, university_name):
    """
    Creates a line plot showing trends of Scope 1, Scope 2, and Scope 3 emissions over time for a given university.

    Parameters:
        data: The scopes dataset (scopes_gwu, scopes_au, scopes_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()
    data1['GHG MTCDE'] = data1['GHG MTCDE'].astype(str).str.replace(',', '').astype(float)
    scope_mapping = {'1': "Scope 1", '2': "Scope 2", '3': "Scope 3"}
    data1['Scope'] = data1['Scope'].map(scope_mapping)

    fig = px.line(data1,
                  x='Fiscal Year',
                  y='GHG MTCDE',
                  color='Scope',
                  markers=True,
                  title=f"Scopes Trend - {university_name}",
                  labels={'GHG MTCDE': 'MT eCO2'},
                  line_shape='linear',
                  color_discrete_sequence=px.colors.qualitative.D3)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Scope",
                      width=900,
                      height=600)
    fig.show()

for university, dataset in scopes_datasets.items():
    plot_scopes_line(dataset, university)

"""## Emission by Category"""

def plot_categories(data, university_name):
    """
    Creates a stacked bar chart for different GHG emission sources over time for a given university.

    Parameters:
        data: The scopes dataset (categories_gwu, categories_au, categories_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()
    data1['GHG MTCDE'] = data1['GHG MTCDE'].astype(str).str.replace(',', '').astype(float)

    fig = px.bar(data1,
                 x='Fiscal Year',
                 y='GHG MTCDE',
                 color='Source',
                 title=f"Categories - {university_name}",
                 labels={'GHG MTCDE': 'MT eCO2'},
                 barmode='stack',
                 color_discrete_sequence=px.colors.qualitative.Vivid)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Source",
                      width=900,
                      height=600)
    fig.show()

categories_datasets = {
    "George Washington University": categories_gwu,
    "American University": categories_au,
    "Gallaudet University": categories_gallaudet}

for university, dataset in categories_datasets.items():
    plot_categories(dataset, university)

def plot_categories_line(data, university_name):
    """
    Creates a stacked bar chart for different GHG emission sources over time for a given university.

    Parameters:
        data: The scopes dataset (categories_gwu, categories_au, categories_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()
    data1['GHG MTCDE'] = data1['GHG MTCDE'].astype(str).str.replace(',', '').astype(float)

    fig = px.line(data1,
                 x='Fiscal Year',
                 y='GHG MTCDE',
                 color='Source',
                 markers=True,
                 title=f"Categories Trend - {university_name}",
                 labels={'GHG MTCDE': 'MT eCO2'},
                  color_discrete_sequence=px.colors.qualitative.Vivid)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Source",
                      width=900,
                      height=600)
    fig.show()

for university, dataset in categories_datasets.items():
    plot_categories_line(dataset, university)
#

"""## Offset & Compost"""

def plot_offsets_compost(data, university_name):
    """
    Creates a stacked bar chart for Offsets and Compost emissions reductions over time for a given university.

    Parameters:
        data: The totals dataset (totals_gwu, totals_au, totals_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()

    data1['Offsets (MTCDE)'] = data1['Offsets (MTCDE)'].astype(str).str.replace(',', '').astype(float).abs()
    data1['Compost (MTCDE)'] = data1['Compost (MTCDE)'].astype(str).str.replace(',', '').astype(float).abs()

    df_long = data1.melt(id_vars=['Fiscal Year'],
                          value_vars=['Offsets (MTCDE)', 'Compost (MTCDE)'],
                          var_name='Reduction Type',
                          value_name='MTCDE')

    fig = px.bar(df_long,
                 x='Fiscal Year',
                 y='MTCDE',
                 color='Reduction Type',
                 title=f"Offsets & Compost Impact - {university_name}",
                 labels={'MTCDE': 'MT eCO2'},
                 barmode='stack',  # Stacked bars
                 color_discrete_sequence=px.colors.qualitative.Dark24)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Reduction Type",
                      width=900,
                      height=600)
    fig.show()

totals_datasets = {
    "George Washington University": totals_gwu,
    "American University": totals_au,
    "Gallaudet University": totals_gallaudet}

for university, dataset in totals_datasets.items():
    plot_offsets_compost(dataset, university)

def plot_offsets_compost_line(data, university_name):
    """
    Creates a line plot for Offsets and Compost emissions reductions over time for a given university.

    Parameters:
        data: The totals dataset (totals_gwu, totals_au, totals_gallaudet)
        university_name (str): Name of the university to display in the title.
    """
    data1 = data.copy()
    data1['Offsets (MTCDE)'] = data1['Offsets (MTCDE)'].astype(str).str.replace(',', '').astype(float).abs()
    data1['Compost (MTCDE)'] = data1['Compost (MTCDE)'].astype(str).str.replace(',', '').astype(float).abs()

    df_long = data1.melt(id_vars=['Fiscal Year'],
                          value_vars=['Offsets (MTCDE)', 'Compost (MTCDE)'],
                          var_name='Reduction Type',
                          value_name='MTCDE')

    fig = px.line(df_long,
                  x='Fiscal Year',
                  y='MTCDE',
                  color='Reduction Type',
                  title=f"Offsets & Compost Trend - {university_name}",
                  labels={'MTCDE': 'MT eCO2'},
                  markers=True,  # Adds markers to each data point
                  color_discrete_sequence=px.colors.qualitative.Dark24)

    fig.update_layout(xaxis_title="Fiscal Year",
                      yaxis_title="MT eCO2",
                      legend_title="Reduction Type",
                      width=900,
                      height=600)

    fig.show()

for university, dataset in totals_datasets.items():
    plot_offsets_compost_line(dataset, university)

"""## Analysis on Scopes & Categories"""

def plot_interactive_stacked_categories(data, university):
    """
    Creates an interactive stacked bar chart showing emissions by category across all scopes,
    allowing users to select a year via a dropdown.

    Parameters:
        data: The dataset containing categopries, scopes, and emissions data.
    """
    data1 = data.copy()
    data1['GHG MTCDE'] = data1['GHG MTCDE'].astype(str).str.replace(',', '').astype(float)
    scope_mapping = {'1': 'Scope 1', '2': 'Scope 2', '3': 'Scope 3'}
    data1['Scope'] = data1['Scope'].map(scope_mapping)

    fig = px.bar(data1,
                 x='Scope',
                 y='GHG MTCDE',
                 color='Source',
                 animation_frame='Fiscal Year',  # Enables dropdown year selection
                 title=f"Emissions by Category Across All Scopes Over Time - {university}",
                 labels={'GHG MTCDE': 'MT eCO2', 'Source': 'Category'},
                 barmode='stack',  # Stacked bars within each scope
                 color_discrete_sequence=px.colors.qualitative.D3)

    fig.update_layout(xaxis_title="Scope",
                      yaxis_title="MT eCO2",
                      legend_title="Category",
                      width=900,
                      height=650)
    fig.show()

for university, dataset in categories_datasets.items():
    plot_interactive_stacked_categories(dataset, university)

"""# Insights

**Gross Emission Comparison**

GWU consistently had the highest emissions over the years, with a peak around 2015 before declining. AU and Gallaudet had relatively stable emissions but also showed reductions over time. This may be due to GW having bigger campus(es) than the other two.

***GW***: 8,496,285 Gross square feet.
Source: https://reports.aashe.org/institutions/george-washington-university-dc/report/2023-04-04/OP/energy/OP-5/

***AU***: 410,257.33 Gross square meters. (around 4,415,973.148 ft²)
Source: https://reports.aashe.org/institutions/american-university-dc/report/2020-03-06/OP/energy/OP-5/

***Gallaudet University***'s "Gross floor area of building space" was not reported on the source.

**Scope Comparison**

Scope 1: direct emissions
Scope 2: indirect emissions like purchased electricity
Scope 3: other indirect emissions, including commuting and waste

Overall, scope 2 emissions were the dominant contributor among the three scopes.

For GWU, significant reductions occurred  after 2015. This decline aligns with the introduction of offsets, as seen in the offset and compost impact plot, where a major spike in offsets was observed around 2015, suggesting that GWU took an aggressive approach toward purchasing offsets to mitigate its emissions impact.

For AU, Scope 2 emissions also played a significant role, although there were reductions earlier than GWU (or it may be that scope two emissions were not recorded in the later years). Notably, AU had a much more prominent use of offsets, particularly after 2015, which led to a sharp decrease in net emissions. The offsets and compost impact plot for AU highlights this, showing significant offsets starting in 2017, aligning with the university’s goal to achieve carbon neutrality. (AU became the first US universityto reach carbon neutrality on 2018. Source: https://www.american.edu/about/sustainability/milestones.cfm#:~:text=AU%20became%20the%20first%20US,and%20offset%20the%20small%20remainder. )

Gallaudet University’s emissions profile is distinct, with a more balanced distribution among the three scopes compared to the other two. While its total emissions were lower than those of the other two universities, the contributions of Scope 3 emissions (such as commuting and waste) remained relatively stable over the years. Unlike GWU and AU, Gallaudet did not seem to employ large-scale offsets, as evidenced by the zero values in the offsets and compost plot (or they might have not reported their offests and composts).

**Category Comparison**

The category-based emissions breakdowns for each university provide additional insights into the sources of emissions. At GWU, purchased electricity dominated emissions until reductions took place post-2015. Student and faculty commuting also contributed significantly. AU had a similar pattern, but the use of offsets significantly helped reduce its emissions. Gallaudet’s emissions were more distributed across categories, with commuting, co-gen steam, and purchased electricity being major contributors.

**Conclusion**

In conclusion, all three universities experienced reductions in emissions over time, but through different strategies. GWU and AU leveraged offsets significantly, with AU demonstrating a strong commitment to carbon neutrality. GWU's emissions reductions were more gradual. Gallaudet, on the other hand, maintained relatively stable emissions without large-scale offsets, indicating a different approach to sustainability. The overall trend highlights the importance of Scope 2 reductions and offsets in achieving institutional carbon goals.

**Key Insights**

- GW has the highest Gross Emisson (might be related to the campus size)
- Among the three scopes, scope 2 was the main contributor to emission
- Main contributing category was "Purchased electricity" (belongs to Scope 2)
- Both GW and AU made commitment to reduce ghg emission, AU having more prominent results
"""

